// constructor

// constructor는 컴퍼넌트 초기 생성된다.

// 방법 :
import React, { Component } from "react";

class App extends Component {
  constructor(props) {
    super(props);
    console.log("constructor");
  }

  render() {
    return (
      <div>
        <h1>안녕하세요!</h1>
      </div>
    );
  }
}



// componentWillMount

// componentWillMount 이 API는 컴퍼넌트가 아닌 우리의 화면에 나가기 직전에 호축죄는 API이다.
// 이 API가 더 이상 필요하지 않게 되면서 v16.3에서는 해당 API가 deprecated 되었으니 옛날엔 이러한 API가 있었구나 하고 알면 된다.

// 방법 : 
componentWillMount (){
 
 }
 
 
 // componentDidMount
 
 // 이 API는 여러분의 컴포넌트가 화면에 나타나게 되었을 때 호출된다.
 // DOM을 사용해야 하는 외부 라이브러리를 연동하거나 해당 컴포넌트에서 데이터를 요청하기 귀해 axios, fetch 등을 통해
 // ajax 요청을 하거나, DOM의 속성을 읽거나 직접 변경하는 작업을 진행한다,
 
 // 방법 : 
 componentDidMount {
  // 외부 라이브러리 연동 : D3, masonry, etc
  // 컴포넌트에서 필요한 데이터 요청 : Ajax, GraphQL, etc
  // DOM에 관련한 작업 : 스크롤 설정, 크기 읽어오기 등
 }
 
 import React, { Component } from "react";

class App extends Component {
  constructor(props) {
    super(props);
    console.log("constructor");
  }

  componentDidMount() {
    console.log('componentDidMount');
  }

  render() {
    return (
      <div>
        <h1>안녕하세요!</h1>
      </div>
    );
  }
}


// 컴포넌트 업데이트
// 컴포넌트가 업데이트는  props의 변화, 긜고 state의 변화에 따라 결정된다.

// componentWillReceiveProps  
// 이 API는 컴포넌트가 새로운 Props를 받게 되었을 때 호출된다.
// 이 안에서는 주로, state가 props에 따라 변해야 하는 로직을 작성한다.
// 이 때 this.props를 조회하면 업데이트 되기 전의 API이니 참고하면 좋다.
// 이 API 또한 v16.3부터 deprecate 된다.

// 방법 :
componentWillReceivProps(nextProps){
// this.props는 아직 바뀌지 않은 상태
}

// static getDerivedStateFromProps()
// 이 함수는, v16.3 이후에 만들어진 LifeCycle API이다.
// 이 API는 props로 받아온 값을 state로 동기화 하는 작업을 해줘야하는 경우에 사용한다.

// 방법 : 
static getDerivedStateFromProps(nextProps, prevState) {
// 여기서 setState를 하는것이 아니라
// 특정 props가 바뀔 때 설정하고 설정하고 싶은 state 값을 리턴하는 형태로 사용된다.
/*
if (nextProps.value !== prevState.value) {
return {value : nextProps.value };
}
return null; // null을 리턴하면 따로 업데이트 할 것은 없다 라는 의미
*/


import React, { Component } from "react";
import Mycomponent from "./Mycomponent";

class App extends Component {
  state = {
    counter: 1,
  };

  constructor(props) {
    super(props);
    console.log("constructor");
  }

  componentDidMount() {
    console.log("componentDidMount");
  }

  handleClick = () => {
    this.setState({
      counter: this.state.counter + 1,
    });
  };

  render() {
    return (
      <div>
        <Mycomponent value={this.state.counter} />
        <button onClick={this.handleClick}>Click</button>
      </div>
    );
  }
}
export default API1;

import React, { Component } from "react";

class Mycomponent extends Component {
  state = {
    value: 0,
  };

  static getDerivedStateFromProps(nextProps, prevState) {
    if (prevState.value !== nextProps.value) {
      return {
        value: nextProps.value,
      };
    }
    return null;
  }

  render() {
    return (
      <div>
        <p>props: {this.props.value}</p>
        <p>state: {this.state.value}</p>
      </div>
    );
  }
}
export default Mycomponent;


// shouldComponentUpdate
// 이 API는 컴포넌트를 최적화하는 작업에서 매우 유용하게 사용된다.
// shouldComponentUpdate는 특정 조건에 따라 랜더링을 막아줄 수 있는 함수이다.

// 방법
shouldComponentUpdate (newxtProps, nextState) {
// return false 하면 업데이트를 안함
// return this.props.checkde !== nextProps.checked
return true;

}
